/*
Write a program to find the n-th ugly number.

Ugly numbers are positive numbers whose prime factors only include 2, 3, 5. 

Example:
Input: n = 10
Output: 12
Explanation: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 is the sequence of the first 10 ugly numbers.

Note:  
1 is typically treated as an ugly number.
n does not exceed 1690.
*/
#include <iostream>
#include <vector>

using namespace std;

class Solution {
    
    public:
        /*  
            The key is to realize each number can be and have to be 
            generated by a former number multiplied by 2, 3 or 5
         */
        int nthUglyNumber(int n) {
            if(n <= 0) return 0;
            int m2 = 0, m3 = 0, m5 = 0;
            vector<int> k(n);
            k[0] = 1;
            for(int i = 1; i < n; i++) {
                k[i] = min(k[m2]*2, min(k[m3]*3, k[m5]*5));
                k[i] == k[m2]*2 && m2++;
                k[i] == k[m3]*3 && m3++;
                k[i] == k[m5]*5 && m5++;
            }
            return k[n-1];
        }
};

int main() {
    Solution sol;
    return 0;
}

/*


*/